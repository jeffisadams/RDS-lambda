Description: "Send Microservice to send emails and messages"
Transform: "AWS::Serverless-2016-10-31"

Globals:
  Function:
    Runtime: go1.x

Parameters:
  DatabaseName:
    Type: String
    Default: testdatabase
  RDSDatabaseUserName:
    Type: String
    Default: admin
  RDSDatabaseUserPassword:
    NoEcho: true
    Type: String
    Default: testing1
  Version:
    Type: String
    Default: v1

Resources:
# Initial attempt
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: name
        Value:  !Join ['', [!Ref DatabaseName, "-VPC" ]]
  # Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Names
        Value: !Sub ${DatabaseName}-PublicA
      - Key: owner
        Value:  Jeff Adams
      - Key: client
        Value:  marketing
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: !Sub ${DatabaseName}-PublicB
      - Key: owner
        Value:  Jeff Adams
      - Key: client
        Value:  marketing

  # Private Subnet
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.11.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Names
        Value: !Sub ${DatabaseName}-PublicA

  # Subnet Group
  PublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupName: publicsubnetgroup
      DBSubnetGroupDescription: Public Subnet Groups
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
      - Key: name
        Value: Public Subnet Group
      - Key: owner
        Value:  Jeff Adams
      - Key: client
        Value:  marketing
  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
      - Key: owner
        Value:  Jeff Adams
      - Key: client
        Value:  marketing
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Nat Gateway
  # Might not need the nat gateway under the assumption that we can just route from api gateway
  # NATGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt ElasticIPAddress.AllocationId
  #     SubnetId: !Ref PublicSubnetA
  #     Tags:
  #     - Key: Name
  #       Value: !Sub ${DatabaseName}-NAT-Gateway
  #     - Key: owner
  #       Value:  Jeff Adams
  #     - Key: client
  #       Value:  marketing
  # ElasticIPAddress:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: VPC
  #     Tags:
  #     - Key: owner
  #       Value:  Jeff Adams
  #     - Key: client
  #       Value:  marketing

  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - PublicSubnetA
      - PublicSubnetB
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: -1
        ToPort: -1
        CidrIp: 69.251.135.83/32
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: owner
        Value:  Jeff Adams
      - Key: client
        Value:  marketing

  # Database Cluster (Currently a serverless Aurora SQL DB)
  # I'm not setting Redundancy for this as it's just a test, and EC2 is expensive
  RDSDatabase:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Ref DatabaseName
      Engine: aurora
      EnableIAMDatabaseAuthentication: true
      MasterUsername: !Ref RDSDatabaseUserName
      MasterUserPassword: !Ref RDSDatabaseUserPassword
      DBSubnetGroupName: !Ref PublicSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt DatabaseSecurityGroup.GroupId
      Tags:
      - Key: owner
        Value:  Jeff Adams
      - Key: client
        Value:  marketing
  RDSInstance1:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - PublicSubnetA
    Properties:
      DBClusterIdentifier: !Ref RDSDatabase
      # Customize this to the size machine you want
      DBInstanceClass: db.r4.large
      Engine: aurora
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref PublicSubnetGroup

  # Deploy Lambda Code
  # Note that there is a lot of wrapping that needs to be done here to ensure it doesn't hang for an hour

  # API Lambda
  ServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ServiceApi
      StageName: !Ref Version
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  ServiceLambdaFunction:
    Type: AWS::Serverless::Function
    Description: Boilerplate function to create and handle incoming requests
    DependsOn:
      - RDSDatabase
    Properties:
      Handler: ./dist/main
      Timeout: 30
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:db:${RDSDatabase}"
      Environment:
        Variables:
          DB_ADMIN_USER: !Ref RDSDatabaseUserName
          DB_PASSWORD: !Ref RDSDatabaseUserPassword
          DB_HOST: !GetAtt RDSDatabase.Endpoint.Address
          DB_PORT: !GetAtt RDSDatabase.Endpoint.Port
          DB_NAME: !Ref DatabaseName
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /
            RestApiId: !Ref ServiceApi
            Method: Get

Outputs:
  VPCID:
    Description: The Logical ID for the VPC
    Value: !Ref VPC
    Export:
      Name: VPCID
  LambdaSecurityGroupId:
    Description: The Security Group to put on the lambdas that need DB Access
    Value: !GetAtt LambdaSecurityGroup.GroupId
    Export:
      Name: LambdaSecurityGroupId
  RDSDatabaseWriteHost:
    Description: Database Host URL
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Export:
      Name: RDSDatabaseWriteHost
  ApiUrl:
    Description: The API URL
    Value: !Sub "https://${ServiceApi}.execute-api.${AWS::Region}.amazonaws.com/${Version}"
